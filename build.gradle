plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.client_version
group = project.maven_group

repositories {
    // Litematica
    maven {
        url "https://www.cursemaven.com"
    }

    // Malilib
    maven {
        url 'https://masa.dy.fi/maven'
    }

    // Meteor
    maven {
        url "https://maven.meteordev.org"
    }

    maven {
        url "https://maven.meteordev.org/snapshots"
    }

    // Other
    maven {
        url "https://maven.vram.io//"
    }

    // GitHub
    maven {
        url "https://jitpack.io"
    }

    mavenCentral()
    jcenter()
}

dependencies {
    def library = { id ->
        implementation(id) {
            exclude group: "org.slf4j"
        }
        shadow(id) {
            exclude group: "org.slf4j"
        }
    }

    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.minecraft_version}+${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    implementation "net.fabricmc:fabric-installer:${project.fabric_installer_version}"

    library("io.netty:netty-handler-proxy:${project.netty_version}")
    library("io.netty:netty-codec-socks:${project.netty_version}")

    // Compat fixes
    modCompileOnly fabricApi.module("fabric-renderer-indigo", project.api_version)

    modCompileOnly("io.vram:canvas-fabric-mc118:1.0.+") {
        transitive = false
    }

    // Baritone integration
/*    modImplementation "baritone:fabric:${project.baritone_version}"
    include "baritone:fabric:${project.baritone_version}"*/
    implementation files('libs/baritone.jar')

    // Litematica integration
    /*modImplementation "curse.maven:litematica-308892:${project.litematica_file_id}"
    include "curse.maven:litematica-308892:${project.litematica_file_id}"*/

    // Malilib for Litematica
    /*modImplementation "fi.dy.masa.malilib:malilib-fabric-${project.minecraft_version}:${project.malilib_version}"
    include "fi.dy.masa.malilib:malilib-fabric-${project.minecraft_version}:${project.malilib_version}"*/

    // Discord RPC

    // IRC
    library 'org.java-websocket:Java-WebSocket:1.5.4'
    library 'com.google.code.gson:gson:2.10'

    // Other
    library "org.apache.httpcomponents:httpclient:${project.apache_http_client_version}"
    library "com.fasterxml.jackson.core:jackson-core:${project.jackson_version}"
    library "com.fasterxml.jackson.core:jackson-databind:${project.jackson_version}"
    library "com.fasterxml.jackson.core:jackson-annotations:${project.jackson_version}"
    library "org.jsoup:jsoup:${project.jsoup_version}"
}

loom {
    accessWidenerPath = file("src/main/resources/mathax.accesswidener")
}

shadowJar {
    configurations = [
        project.configurations.shadow
    ]
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version
        filter {
            line -> line.replace("@mc_version@", project.minecraft_version)
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding("UTF-8")
}



remapJar {
    dependsOn shadowJar
    input.set(shadowJar.archiveFile)
    input.set shadowJar.archiveFile
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            artifact(javadocJar) {
                builtBy javadocJar
            }
        }
    }
}

apply from: "scripts/packetutils.gradle"

